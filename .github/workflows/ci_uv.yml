name: 自动构建 by uv
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 构建 ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, macos, windows ]
        target: [ x86_64, aarch64 ]
        include:
          - os: windows
            ls: dir
    steps:
      - name: 读取仓库代码
        uses: actions/checkout@v2

      - name: 安装rust
        uses: dtolnay/rust-toolchain@stable

      - id: cache-rust
        name: rust缓存
        uses: Swatinem/rust-cache@v2

      - name: 添加LLVM工具
        run: rustup component add llvm-tools-preview

      - name: 安装uv环境
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: 安装uv工具
        run: uv sync --dev --no-install-package datafusion

      - name: 构建 Python Wheel
        # 这里使用了--no-project参数，表示不使用当前目录下的Cargo.toml文件
        # --release表示构建发布版本
        # --strip表示去除调试信息
        # --no-sdist表示不构建sdist包
        # --no-binary :all:表示不构建二进制包
        # --no-compile表示不编译Rust代码
        # --no-verify表示不验证Rust代码
        # --no-build表示不构建Rust代码
        # --no-test表示不测试Rust代码
        run: uv run --no-project maturin develop --release --strip

      - name: 找到 WIN 构建的产物
        if: matrix.os == 'windows'
        run: dir target\wheels\
        # since the runner is dynamic shellcheck (from actionlint) can't infer this is powershell
        # so we specify it explicitly
        shell: powershell

      - name: 找到 MAC 构建的产物
        if: matrix.os != 'windows'
        run: find target/wheels/

    #      - name: 上传构建产物
    #        uses: actions/upload-artifact@v4
    #        with:
    #          name: wheels-${{ matrix.os }}-${{ matrix.target }}
    #          path: dist
    